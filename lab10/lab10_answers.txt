CS-220 Spring 2017 Lab 10 answers		Due: April 25, 2017
Alexander Benedict


1. Cut and paste a copy of your successful test.txt file that creates a texthex.txt 
   file that invokes the target function:
============================================================================ 
# Put input for makeHex in this file.
# Lines that start with "#" are comments and are ignored by makeHex
# Lines that start with "C " are character strings, the data is copied to the output (testHex.txt)
# Lines that start with "X " are hexadecimal strings, the data is converted from hex to ASCII and copied
#    to the output (testHex.txt)
C This is a character string
X 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000efbeadde5006400000000000
 ==============================================================================  
   
   
   
   
2. Notice that the target function in target.c ends with an "exit(0)" invocation.  The
   "exit(0)" causes the target function to return directly to the operating system cleanup
   routine instead of to the function that called "target".  If the target function had 
   ended with "return false" instead of "exit(0)", would target still run sucessfully?
   If not, what might happen and why?
   
I beleive that the function would still print out the string but it will give some type of error/warning or segmentation fault when it reaches the return false.
   
3. If target.c had used fgets instead of gets, would your buffer overflow attack have been succesful?
   Why or why not?
   
I don't beleive so because fgets saves to a buffer until it is full, so it would have protected against my buffer overflow attack
   
   
4. Did the Makefile make this lab easier or harder to run?  Is it worth the time to build a correct
   Makefile so that dependencies are automatically taken care of?
   
Absolutely, it is a good idea because it limits human error and made the process much faster
   
   
5. Now that you know how to do a buffer overflow attack, could you do a buffer overflow
   attack on target WITHOUT looking at target.c?  If not, why not?  If so, what tools
   would you use to figure out what is in the "target" executable file?
   
I beleive it could be done without the .c file, as I could use info functions to find the function and disassemble to get the address and info. 
